require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

// Initialize Express app
const app = express();
app.use(cors());
app.use(bodyParser.json());


// Connect to MongoDB
mongoose.connect(process.env.DB_CONNECTION);

// Define User Schema
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
});

// Define Post Schema
const postSchema = new mongoose.Schema({
  title: String,
  content: String,
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Relationship
});

// Create Models
const User = mongoose.model('User', userSchema);
const Post = mongoose.model('Post', postSchema);

// Routes
// --- Users ---
// Create a User
app.post('/api/users', async (req, res) => {
  try {
    const user = new User(req.body);
    console.log("[req.body]", req.body)
    await user.save();
    res.status(201).json(user);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get All Users
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// --- Posts ---
// Create a Post for a User
app.post('/api/posts', async (req, res) => {
  try {
    const post = new Post(req.body);
    await post.save();
    res.status(201).json(post);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get All Posts with User Info
app.get('/api/posts', async (req, res) => {
  try {
    const posts = await Post.find().populate('user', 'name email'); // Populate user info
    res.json(posts);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Get Posts for a Specific User
app.get('/api/users/:userId/posts', async (req, res) => {
  try {
    const posts = await Post.find({ user: req.params.userId }).populate('user', 'name email');
    res.json(posts);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Update a Post
app.put('/api/posts/:id', async (req, res) => {
  try {
    const post = await Post.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(post);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Delete a Post
app.delete('/api/posts/:id', async (req, res) => {
  try {
    await Post.findByIdAndDelete(req.params.id);
    res.json({ message: 'Post deleted successfully' });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Start the server
console.log('[env]', process.env.PORT)
app.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT}`));
